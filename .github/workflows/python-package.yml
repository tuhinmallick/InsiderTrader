name: Build and Publish Python Distribution

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-n-publish:
    name: Build and publish Python distribution
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Cache Poetry packages
      - name: Cache Poetry packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "::add-path::$HOME/.local/bin"

      # Install dependencies
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root

      # Run tests (optional but recommended)
      - name: Run tests
        run: |
          poetry run pytest

      # Lint with flake8
      - name: Lint with flake8
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Build distribution
      - name: Build distribution
        run: |
          poetry build

      # Publish to Test PyPI
      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          poetry publish --repository test-pypi --username $TWINE_USERNAME --password $TWINE_PASSWORD

      # Publish to PyPI (conditional)
      - name: Publish to PyPI
        if: ${{ github.event.inputs.publish_to_pypi == 'true' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          poetry publish --username $TWINE_USERNAME --password $TWINE_PASSWORD
