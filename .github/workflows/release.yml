name: Release

on:
  workflow_dispatch:
    inputs:
      bump:
        type: choice
        description: 'Version bump type'
        required: true
        options: [major, minor, patch]
      publish_to_pypi:
        type: boolean
        description: 'Publish to PyPI'
        required: true
        default: false

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Configure Git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Bump version
        id: bump_version
        run: |
          poetry version ${{ github.event.inputs.bump }}
          echo "NEW_VERSION=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit changes
        run: |
          git add pyproject.toml CHANGELOG.md
          git commit -m "Bump version to ${{ steps.bump_version.outputs.NEW_VERSION }}"
          git tag v${{ steps.bump_version.outputs.NEW_VERSION }}

      - name: Run tests
        run: poetry run pytest

      - name: Build package
        run: poetry build

      - name: Publish to TestPyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry publish -r testpypi

      - name: Publish to PyPI
        if: ${{ github.event.inputs.publish_to_pypi == 'true' }}
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry publish

      - name: Push changes
        run: git push origin main --tags

      - name: Create GitHub Release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: v${{ steps.bump_version.outputs.NEW_VERSION }}
          publish: true

      - name: Notify on Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: Release process failed
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
